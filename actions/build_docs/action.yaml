name: Test Documentation
inputs:
  target:
    type: string
  skip_doxygen:
    type: boolean
  generate_modules_docs:
    type: boolean
  CMAIZE_GITHUB_TOKEN:
    type: string
runs:
  using: "composite"
  steps:
    - name: Give Permission to build_docs.sh
      run: chmod +x ${{github.action_path}}/build_docs.sh 
      shell: bash 
    - name: Build Documentation
      if: ${{ inputs.skip_doxygen == 'false' }} 
      run: ${{github.action_path}}/build_docs.sh ${{inputs.target}}
      shell: bash
    - name: Generate Module Documentation
      if: ${{ inputs.generate_modules_docs == 'true' }}
      env:
        CMAIZE_GITHUB_TOKEN: ${{inputs.CMAIZE_GITHUB_TOKEN}}
      run:  |
        # First, we need to build the full application
        chmod +x ${{github.action_path}}/../build/build.sh
        ${{github.action_path}}/../build/build.sh

        #Debugging
        ls $(pwd)/build/chemcache.so
        ls $(pwd)/build/_deps/pluginplay-build/pluginplay.so
        cd build
        ctest -VV
        cd ..

        # Next, we generate the module docs
        . venv/bin/activate
        PYTHONPATH="${PYTHONPATH}:$(pwd)/build"
        if [ -d "$(pwd)/build/_deps/pluginplay-build" ]; then
          PYTHONPATH="${PYTHONPATH}:$(pwd)/build/_deps/pluginplay-build"
        fi
        echo $PYTHONPATH
        python ${{github.action_path}}/generate_module_dox.py ${{inputs.target}}
        deactivate

      shell: bash
    - name: Give Permission to build_sphinx_docs.sh
      run: chmod +x ${{github.action_path}}/build_sphinx_docs.sh 
      shell: bash
    - name: Build Sphinx Documentation
      run: ${{github.action_path}}/build_sphinx_docs.sh
      shell: bash